Discussion
----------

1. Which would be the most efficient data structure for a data set with the
   following requirements:

  - frequently removing and adding items to the beginning of the data structure

  - frequently removing and adding items to the end of the data structure

  - rarely indexing and searching

  A. A Python list B. Singly linked list C. Doubly linked list

  Explain your answer.

When you frequently add and remove from the end, it's appropriate to use a doubly-
linked list. You can enqueue or dequeue easiest with a doubly linked list by
popping the head or tail and then readjusting the head or tail pointer.
It would suck to search because, worst case scenario, you need to traverse
the entire doubly-linked list.



2. Which would be the most efficient data structure for a data set with the
   following requirements:

  - order is unimportant

  -frequently adding and removing items

  - frequently looking up items

  A. A Python list  B. A Dictionary  C. Deque  D. Binary Search Tree

  Explain your answer.

A dictionary is most efficient. Unlike a list, the order is not important.
Even though Python allows you to index into a dictionary, a lot of other
languages do not allow you to index into their equivalents. It is quick to add and
remove values or key-values pairs. It is also quicker to look up items.
Binary Search Tree is really only used to efficiently find items that can be
ordered. Removing items in a Binary tree sounds like a pain because you'd have to 
rebalance. 



3. Explain why looking up, adding elements, and removing elements from a 
   dictionary or hash map are all O(1) operations.

All these operations have a constant runtime because you do not need to traverse
each key in the dictionary to do the operations. That would be an O(n)
runtime. Instead, you can go directly there. Each operation might take different
constant times, but again, it's still constant time, not linear time.



4. Explain why removing elements from or adding elements to an arbitrary
   location in a Python list are O(n) operations.
  
  This is linear because, worst case scenario, you will need to traverse the entire
  list in order to add or remove the element. There is no way to go directly to that
  index without checking the elements before it.



5. What is the correct runtime for:

  - Bubble Sort?
  Quadratic runtime. You need to do a for loop within a for loop which causes
  multiplying two linear times to get a quadratic time.

  - Quicksort?
  This is the product of a linear and a logarithmic time, which in the long run is worse
  than logarithmic, but much much better than quadratic as it is increasing at a
  decreasing rate instead of quadratic which increases at an increasing rate. =P
  Because we need linear number of pivots and logarithmically sort through the rest.

  - Merge Sort?
  This is also the product of a linear and a logarithmic time. =P
  You must go through the entire list, n, but then you are dividing and eliminating
  which causes the logarithmic goodness to not be as bad as n.

  - Insertion Sort?
  Insertion sort is worst case scenario quadratic runtime. If the list is reversed,
  it would literally move every element after comparing every element to it's left
  which would be something like 7+6+5+4+3+2+1 which is (n squared - n ) /2 I believe.


6. What is the difference between a tree and a graph?

A tree has a specific node that is the root of the tree. Each following node can be
considered a part of the bigger tree, or have a sub tree. A graph can look more like a web
where there is not a specific root node and you can have many connections between nodes.
A tree is more hierarchical vs. a graph is more of a network.





7. Using the Python implementation of Quicksort from the instructions:

  Given the list [8, 4, 1, 6, 5, 2, 7, 3]:
  When this function is initially called, what are the values of:

    - lst - [8, 4, 1, 6, 5, 2, 7, 3] whole thing

    - pivot - [5] index 4

    - lo - [4, 1, 2, 3] lower in order

    - hi - [8, 6, 7] higher in order



  When the quicksort is first called recursively on the `lo` list, what are the
  values of:

  - lst - [4, 1, 2, 3] lower half

  - pivot - [2] mid

  - lo - [1]

  - hi - [4, 3]
